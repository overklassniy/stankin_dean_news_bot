import json
import logging
import os
from datetime import datetime
from typing import Union

import aiohttp
from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


# –ü–æ–¥–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–∑ config.json
def load_config() -> dict:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ config.json.

    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
    """
    with open('config.json', 'r') as config_file:
        return json.load(config_file)


config = load_config()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logger() -> logging.Logger:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å.

    Returns:
        logging.Logger: –û–±—ä–µ–∫—Ç –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤.
    """
    os.makedirs(config['LOGS_DIR'], exist_ok=True)
    current_time = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    log_file_name = f"{config['LOGS_DIR']}/{current_time}.log"

    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    file_handler = logging.FileHandler(log_file_name)
    console_handler = logging.StreamHandler()

    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(formatter)
    console_handler.setFormatter(formatter)

    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    return logger


logger = setup_logger()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ JSON
def load_json_file(file_path: str, default_value: Union[dict, list]) -> Union[dict, list]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞. –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.

    Args:
        file_path (str): –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É.
        default_value (dict | list): –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.

    Returns:
        dict | list: –î–∞–Ω–Ω—ã–µ, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞, –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    """
    if os.path.exists(file_path):
        with open(file_path, 'r') as f:
            return json.load(f)
    return default_value


def save_json_file(file_path: str, data: Union[dict, list]) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª.

    Args:
        file_path (str): –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É.
        data (dict | list): –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
    directory = os.path.dirname(file_path)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∏ —Å–æ–∑–¥–∞–µ–º –µ—ë, –µ—Å–ª–∏ –Ω–µ—Ç
    if not os.path.exists(directory):
        os.makedirs(directory)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
    with open(file_path, 'w') as f:
        json.dump(data, f)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
groups = load_json_file(config['GROUPS_FILE'], default_value=[])
last_news_id = load_json_file(config['LAST_NEWS_ID_FILE'], {'last_news_id': 0})['last_news_id']


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
async def fetch_news() -> list:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL, —Å—Ä–∞–≤–Ω–∏–≤–∞—è –∏—Ö —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º ID –Ω–æ–≤–æ—Å—Ç–∏.

    Returns:
        list: –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç ID –±–æ–ª—å—à–µ, —á–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π ID.
    """
    global last_news_id
    try:
        async with aiohttp.ClientSession() as session:
            request_params = config['REQUEST']

            async with session.post(request_params['URL'], headers=request_params['HEADERS'], json=request_params['DATA']) as response:
                response.raise_for_status()
                news = (await response.json())['data']['news']
                new_news = [item for item in news if last_news_id is None or item['id'] > last_news_id]
                if new_news:
                    last_news_id = max(item['id'] for item in new_news)
                    save_json_file(config['LAST_NEWS_ID_FILE'], {'last_news_id': last_news_id})
                    logger.info(f"Fetched {len(new_news)} new news items.")
                    return new_news
                logger.info("No new news found.")
    except aiohttp.ClientError as e:
        logger.error(f"Error fetching news: {e}")
    return []


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –≥—Ä—É–ø–ø—ã
async def send_news_to_groups(bot: Bot, news_list: list) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ Telegram –≥—Ä—É–ø–ø—ã.

    Args:
        bot (Bot): –û–±—ä–µ–∫—Ç Telegram-–±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
        news_list (list): –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    for news in news_list:
        news_title = news['title']
        news_url = f'https://stankin.ru/news/item_{news["id"]}'
        # –≤ json –æ—Ç–≤–µ—Ç–µ –¥–∞—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD 00:00:00+03, —Ç–∞–∫ –∫–∞–∫ –≤ –¥–µ–∫–∞–Ω–∞—Ç–µ —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã –∏ —Å–µ–∫—É–Ω–¥—ã –Ω–µ –ø–∏—à—É—Ç, —Ç–æ –∏ –Ω–∞–º –æ–Ω–∏ –Ω–µ –Ω—É–∂–Ω—ã
        news_date = news['date'].split()[0]
        news_date = '.'.join(news_date.split('-')[::-1])  # –ø—Ä–∏–≤–æ–¥–∏–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–∑ YYYY-MM-DD –≤ DD-MM-YYYY
        message = (
            f'<a href="{news_url}"><b>{news_title}</b></a>\n\n'
            f'üóì {news_date}'
        )
        # message = f"** [{news_title}]({news_url}) **\n\nüóì > {news_date}"
        for chat_id in groups:
            try:
                stankin_image_url = config['NEWS_IMAGE_URL']
                read_kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ü—Ä–æ—á–∏—Ç–∞—Ç—å', url=news_url)]])
                await bot.send_photo(chat_id, stankin_image_url, caption=message, parse_mode='HTML', reply_markup=read_kb)
                logger.info(f"Sent news to group {chat_id}: {news_title}")
            except Exception as e:
                logger.error(f"Error sending message to group {chat_id}: {e}")
